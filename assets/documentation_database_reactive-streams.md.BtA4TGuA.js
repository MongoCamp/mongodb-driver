import{_ as i,c as a,o as t,a2 as e}from"./chunks/framework.B4IoZSds.js";const g=JSON.parse('{"title":"Reactive Streams","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/database/reactive-streams.md","filePath":"documentation/database/reactive-streams.md","lastUpdated":1758723910000}'),l={name:"documentation/database/reactive-streams.md"};function n(h,s,k,p,r,d){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="reactive-streams" tabindex="-1">Reactive Streams <a class="header-anchor" href="#reactive-streams" aria-label="Permalink to &quot;Reactive Streams&quot;">​</a></h1><ul><li>The MongoDB Scala driver is built upon <a href="https://www.reactive-streams.org/" target="_blank" rel="noreferrer">Reactive Streams</a></li><li>mongocamp wraps around the scala driver =&gt; Full support of Reactive Streams</li><li>For Blocking Results (implicit) conversion to Result Objects is provided</li><li>Conversion of Observable to Future is available</li></ul><div class="tip custom-block"><p class="custom-block-title">ScalaDriverDocs</p><p>The MongoDB Scala Driver is an asynchronous and non blocking driver. Using the Observable model asynchronous events become simple, composable operations, freed from the complexity of nested callbacks.</p><p>Additional Info for <a href="https://github.com/reactive-streams/reactive-streams-jvm/" target="_blank" rel="noreferrer">Reactive Streams JVM</a></p><p>Additional Info for <a href="https://mongodb.github.io/mongo-java-driver/4.0/driver-scala/getting-started/quick-start-primer/" target="_blank" rel="noreferrer">Mongo Scala Reactive Streams</a></p></div><h2 id="blocking-results" tabindex="-1">Blocking Results <a class="header-anchor" href="#blocking-results" aria-label="Permalink to &quot;Blocking Results&quot;">​</a></h2><p>Conversion is provided in the DAO instances with four Helper function for Observable[C]:</p><table tabindex="0"><thead><tr><th style="text-align:left;">Function Name</th><th style="text-align:left;">Function Result</th><th style="text-align:left;">Sample</th><th style="text-align:left;">Sample Result</th></tr></thead><tbody><tr><td style="text-align:left;">result</td><td style="text-align:left;">C</td><td style="text-align:left;">BookDAO.count().result()</td><td style="text-align:left;">Long</td></tr><tr><td style="text-align:left;">results</td><td style="text-align:left;">Seq[C]</td><td style="text-align:left;">PersonDAO.findAggregated(aggregator).results()</td><td style="text-align:left;">Seq[Person]</td></tr><tr><td style="text-align:left;">resultList</td><td style="text-align:left;">List[C]</td><td style="text-align:left;">UserDAO.find(&quot;name&quot;, &quot;User&quot;).resultList()</td><td style="text-align:left;">List[User]</td></tr><tr><td style="text-align:left;">resultOption</td><td style="text-align:left;">Option[C]</td><td style="text-align:left;">PersonDAO.find(Map(&quot;id&quot; -&gt; 42)).resultOption()</td><td style="text-align:left;">Option[Person]</td></tr></tbody></table><p>All functions have an optional maxWait parameter (Default maxWait = 10 seconds).</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> listWithCustomMaxWait</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find().resultList(maxWait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="implicit-result-conversion-blocking" tabindex="-1">Implicit Result Conversion (Blocking) <a class="header-anchor" href="#implicit-result-conversion-blocking" aria-label="Permalink to &quot;Implicit Result Conversion (Blocking)&quot;">​</a></h3><p>To use implicit result conversion, you have to import the mongocamp mongodb base package object.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongocamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongodb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span></span></code></pre></div><p>After that, implicit conversion and other useful implicits (e.g. Map -&gt; Bson) are available.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> imagesCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageFilesDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> seq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="future-results" tabindex="-1">Future Results <a class="header-anchor" href="#future-results" aria-label="Permalink to &quot;Future Results&quot;">​</a></h2><p>DAO Instances support (implicit) conversion to Future,</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> future</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find().asFuture()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mapped</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future.map(personSeq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personSeq.map(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.name))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.result(mapped, duration)</span></span></code></pre></div>`,16)])])}const E=i(l,[["render",n]]);export{g as __pageData,E as default};
