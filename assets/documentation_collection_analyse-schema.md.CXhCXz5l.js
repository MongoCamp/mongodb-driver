import{_ as s,c as e,o as i,a2 as t}from"./chunks/framework.B4IoZSds.js";const k=JSON.parse('{"title":"Analyse Schema","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/collection/analyse-schema.md","filePath":"documentation/collection/analyse-schema.md","lastUpdated":1758723910000}'),h={name:"documentation/collection/analyse-schema.md"};function n(l,a,c,o,r,p){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="analyse-schema" tabindex="-1">Analyse Schema <a class="header-anchor" href="#analyse-schema" aria-label="Permalink to &quot;Analyse Schema&quot;">​</a></h1><p>The driver supports an automated detection of the schema of an existing collection. The schema is used to detect the types of the columns.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="schema-analysis" tabindex="-1">Schema Analysis <a class="header-anchor" href="#schema-analysis" aria-label="Permalink to &quot;Schema Analysis&quot;">​</a></h3><p>Analyse a collection to detect the values for each field and the percentage distribution of the types.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> schemaExplorer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SchemaExplorer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> schemaAnalysis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schemaExplorer.analyzeSchema(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonDocumentDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="detect-schema" tabindex="-1">Detect Schema <a class="header-anchor" href="#detect-schema" aria-label="Permalink to &quot;Detect Schema&quot;">​</a></h3><p>The Schema Detector can be used to detect the schema of a collection and is based on <a href="./analyse-schema.html#schema-analysis">Schema Anaysis</a>. The schema is used to detect the types of the columns and generate a <a href="https://json-schema.org" target="_blank" rel="noreferrer">JSON Schema</a> for the collection. In case of multiple types of a field the Generation of the JSON Schema use the type with the most elements.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="https://json-schema.org" target="_blank" rel="noreferrer">JSON Schema</a> format can be use to validate or generate data, as well to secure your <a href="https://www.mongodb.com/docs/manual/core/schema-validation/" target="_blank" rel="noreferrer">Mongo Collection</a>.</p></div><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> schemaExplorer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SchemaExplorer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schemaExplorer.detectSchema(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonDocumentDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> schemaJson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schema.toJson</span></span></code></pre></div>`,10)])])}const m=s(h,[["render",n]]);export{k as __pageData,m as default};
