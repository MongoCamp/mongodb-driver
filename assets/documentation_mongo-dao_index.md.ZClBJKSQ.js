import{_ as a,c as i,o as e,a2 as t}from"./chunks/framework.B4IoZSds.js";const c=JSON.parse('{"title":"MongoDAO","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/mongo-dao/index.md","filePath":"documentation/mongo-dao/index.md","lastUpdated":1758723910000}'),n={name:"documentation/mongo-dao/index.md"};function h(l,s,r,o,p,k){return e(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="mongodao" tabindex="-1">MongoDAO <a class="header-anchor" href="#mongodao" aria-label="Permalink to &quot;MongoDAO&quot;">​</a></h1><h2 id="info" tabindex="-1">Info <a class="header-anchor" href="#info" aria-label="Permalink to &quot;Info&quot;">​</a></h2><p>MongoDAO is the core of this framework. The <a href="https://en.wikipedia.org/wiki/Data_access_object" target="_blank" rel="noreferrer">DAO</a> Pattern simplifies database usage.</p><p>The MongoDAO object holds a reference to a <a href="http://mongodb.github.io/mongo-scala-driver/2.3/scaladoc/org/mongodb/scala/MongoCollection.html" target="_blank" rel="noreferrer">MongoCollection</a> and adds functions for easy collection handling.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li><a href="./base.html">MongoDAO Base</a> (Drop, Index, Count)</li><li><a href="./crud.html">MongoDAO CRUD</a> (Create, Insert, Delete)</li><li><a href="./search.html">MongoDAO Search</a> (Search, Distinct, Aggregate)</li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>A DatabaseProvider is needed.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fromPath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev.mongocamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="create-dao" tabindex="-1">Create DAO <a class="header-anchor" href="#create-dao" aria-label="Permalink to &quot;Create DAO&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Since Version 3.0.0 with Scala 3 support, we use Circe for automatic case class conversion. In the most cases, you can use the generic auto import. More Information about Circe can be found <a href="https://circe.github.io/circe/codecs/auto-derivation.html" target="_blank" rel="noreferrer">here</a>.</p></div><p>A Type Parameter is used for automatic Document to Class conversion.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongocamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongodb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RestaurantDAO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MongoDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](provider, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;restaurants&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="use-dao" tabindex="-1">Use DAO <a class="header-anchor" href="#use-dao" aria-label="Permalink to &quot;Use DAO&quot;">​</a></h3><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongocamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mongodb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> restaurantsSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RestaurantDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAllRestaurants</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RestaurantDAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find()</span></span></code></pre></div>`,15)])])}const g=a(n,[["render",h]]);export{c as __pageData,g as default};
